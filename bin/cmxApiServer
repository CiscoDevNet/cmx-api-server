#!/usr/bin/env node

/**
 * Module dependencies.
 */

var config = require('config');
var cluster = require('cluster');
var https = require('https');
var http = require('http');
var fs = require('fs');
var os = require('os');
var Table = require('cli-table');
var main = require('../main');
var logger = require(__base + 'config/logger');
var metricsLogger = require(__base + 'config/metrics-logger');
var debug = require('debug')('cmx-tools:server');
var privateKey = fs.readFileSync(__base + 'config/certs/server-key.pem').toString();
var certificate = fs.readFileSync(__base + 'config/certs/server-cert.pem').toString();

var options = {
  key : privateKey,
  cert : certificate
}

/**
 * Create HTTP server.
 */
var workers = [];
if (cluster.isMaster) {
    logger.info(`Master PID ${process.pid} is running`);

    function masterMessageHandler(msg) {
        if (msg.cmd && msg.cmd === 'terminate') {
            logger.error('!!!!!!!!!!! Request to terminate API Server !!!!!!!!!!!!');
            process.exit(1);
        }
    }

    // Fork workers.
    var workerId = 1;
    var workerRestarts = 0;
    var workerInfoStats = true;
    for (let i = 0; i < config.get('notifications.workers'); i++) {
        var worker = cluster.fork({WORKER_ID: workerId, WORKER_PORT: config.get('notifications.port'), WORKER_INFO_STATS: workerInfoStats});
        worker.workerPort = config.get('notifications.port');
        worker.workerInfoStats = workerInfoStats;
        workers.push(worker);
        workerInfoStats = false;
        ++workerId;
    }
    for (let i = 0; i < config.get('restApi.workers'); i++) {
        var worker = cluster.fork({WORKER_ID: workerId, WORKER_PORT: config.get('restApi.port'), WORKER_INFO_STATS: workerInfoStats});
        worker.workerPort = config.get('restApi.port');
        worker.workerInfoStats = workerInfoStats;
        workers.push(worker);
        ++workerId;
    }

    for (const id in cluster.workers) {
        cluster.workers[id].on('message', masterMessageHandler);
    }

    cluster.on('exit', (worker, code, signal) => {
        logger.error(`Worker PID ${worker.process.pid} died. Worker ID ${worker.id}`);
        for(var i=0; i < workers.length; i++){
            var aworker = workers[i];
            if (worker.pid === aworker.pid) {
                workers.splice(i);
            }
        }
        var oldWorkerId = worker.id;
        var oldWorkerPort = worker.workerPort;
        var oldWorkerInfoStats = worker.workerInfoStats;
        logger.info(`Restarting Worker ${oldWorkerId} died. Using port ${oldWorkerPort}`);
        var newWorker = cluster.fork({WORKER_ID: workerId, WORKER_PORT: oldWorkerPort, WORKER_INFO_STATS: oldWorkerInfoStats});
        newWorker.workerPort = oldWorkerPort;
        newWorker.workerInfoStats = oldWorkerInfoStats;
        workers.push(newWorker);
        ++workerId;
        ++workerRestarts;
    });
    refreshSummaryInfo();
    setInterval(refreshSummaryInfo, config.get('server.logStatsInterval') * 1000);
} else {
    // Workers can share any TCP connection
    // In this case it is an HTTP server
    var server = {};
    if (config.get('server.doHttps')) {
      server = https.createServer(options, main);
    } else {
       server = http.createServer(main);
    }

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(process.env.WORKER_PORT);
    server.on('error', onError);

    logger.info(`Worker PID ${process.pid} started. Worker ID ${process.env.WORKER_ID}`);
}

// -----------------------------------------------------------------------
// Function: refreshSummaryInfo
//
// Description: Refresh the summary notification information
//
// Parameters: None
//
// Returns: None
// -----------------------------------------------------------------------
function refreshSummaryInfo() {

    var processInfoTable = new Table({style:  { head: [], border: [] }});
    var memoryUsage = process.memoryUsage();
    processInfoTable.push(
            {'Total Memory': (os.totalmem() / 1048576).toFixed(2) + " MB"},
            {'Free Memory': (os.freemem() / 1048576).toFixed(2) + " MB"},
            {'Master Node.js RSS Memory': (memoryUsage.rss / 1048576).toFixed(2) + " MB"},
            {'Master Node.js Heap Total Memory': (memoryUsage.heapTotal/ 1048576).toFixed(2) + " MB"},
            {'Master Node.js Heap Used Memory': (memoryUsage.heapUsed / 1048576).toFixed(2) + " MB"},
            {'Master Node.js External Memory': (memoryUsage.external / 1048576).toFixed(2) + " MB"},
            {'Notification Workers': config.get('notifications.workers')},
            {'REST API Workers': config.get('restApi.workers')},
            {'Worker Restarts': workerRestarts}
    );
    metricsLogger.info("Memory Stats\n" + processInfoTable.toString());
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            logger.error("Port requires elevated privileges: " + process.env.WORKER_PORT);
            process.send({ cmd: 'terminate' });
            break;
        case 'EADDRINUSE':
            logger.error("Port is already in use: " + process.env.WORKER_PORT);
            process.send({ cmd: 'terminate' });
            break;
        default:
            throw error;
    }
}